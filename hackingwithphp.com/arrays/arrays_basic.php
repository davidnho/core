<?php

//ARRAYS BASIC
echo "ARRAYS BASIC" . "</br>";

$myarray = array("Apples", "Oranges", "Pears");
$size = count($myarray);

//method 1
echo "</br></br>";
print_r($myarray);

//method 2
echo "</br></br>";
var_dump($myarray);

//passing array to a variable
$output = print_r($myarray, TRUE);
print $output;

//shorter method of declaring array
$data = ['title', 'pagename'];
//outputs data
echo "</br></br>";
var_dump($data);


var_export($myarray);
//output generated by var_export can be embedded to a new PHP script like the one below..
$foo = array(0 => 'Apples', 1 => 'Oranges', 2 => 'Pears',);
var_dump($foo);

//ASSOCIATIVE ARRAYS
echo "ASSOCIATIVE ARRAYS" . "</br>";
$myarray = array("a" => "Apples", "b" => "Oranges", "c" => "Pears");

echo "</br></br>";
var_dump($myarray);

//using floating point as keys
$array[1.5] = "foo";
$array[1.6] = "bar";

echo "</br></br>";
var_dump($array);

//treat floating point keys as string to fix the problem above
$array["1.5"] = "foo";
$array["1.6"] = "bar";
var_dump($array);

//ITERATING THROUGH ARRAYS
echo "ITERATING THROUGH ARRAYS" . "</br>";

//the basic 
foreach ($myarray as $val) {
    echo $val . "</br>";
}

//with keys
foreach ($myarray as $key => $val) {
    echo "$key : $val</br>";
}

//using list() and each()
while (list($var, $val) = each($array)) {
    print "$var is $val\n";
}

//the array operator []
$array["a"] = "Foo";
$array["b"] = "Bar";
$array["c"] = "Baz";

echo "</br></br>";
var_dump($array);

//returning arrays from functions
function dofoo() {
    $array["a"] = "Foo";
    $array["b"] = "Bar";
    $array["c"] = "Baz";
    return $array;
}

echo "</br></br>";
$foo = dofoo();
var_dump($foo);

//CHOPPING AND CHANGING ARRAYS
echo "CHOPPING AND CHANGING ARRAYS" . "</br>";
$toppings1 = array("Pepperoni", "Cheese", "Anchovies", "Tomatoes");
$toppings2 = array("Ham", "Cheese", "Peppers",);

//this will get the values of $toppings1 that do exists in $toppings2
$inttoppings = array_intersect($toppings1, $toppings2);

//returns a new array containing all the values of $toppings1 that do not exist in $toppings2,
$difftoppings = array_diff($toppings1, $toppings2);

//this combines the two arrays
$bothtoppings = array_merge($toppings1, $toppings2);

echo "</br></br>";
var_dump($inttoppings);
var_dump($difftoppings);
var_dump($bothtoppings);

//STRIPPING OUT DUPLICATE VALUES
var_dump(array_unique($bothtoppings));

//FILTERING
echo "FILTERING" . "</br>";

function endswithy($value) {
    return (substr($value, -1) == 'y');
//    return (substr($value, 0,2) == 'Ti');
}

$people = array("Johnny", "Timmy", "Bobby", "Sam", "Tammy", "Danny", "Joe");
$withy = array_filter($people, "endswithy");
var_dump($withy);

//Converting an array to individual variables - READ MORE
//CHECKING WHETHER AN ELEMENT EXISTS
echo "CHECKING WHETHER AN ELEMENT EXISTS" . "</br>";
$needle = "Noel";
$haystack = array("Johnny", "Timmy", "Bobby", "Sam", "Tammy", "Danny", "Joe");
echo "</br></br>";

if (in_array($needle, $haystack)) {
    print "$needle is in the array!\n";
} else {
    print "$needle is not in the array\n";
}
echo "</br></br>";

//Using an array as a double-ended queue - READ MORE
//SWAPPING KEYS AND VALUES
echo "SWAPPING KEYS AND VALUES" . "</br>";
$capitalcities['England'] = 'London';
$capitalcities['Scotland'] = 'Edinburgh';
$capitalcities['Wales'] = 'Cardiff';
$flippedcities = array_flip($capitalcities);
var_dump($flippedcities);
echo "</br></br>";

//SORTING ARRAYS
echo "SORTING ARRAYS" . "</br>";
$capitalcities[] = 'London';
$capitalcities[] = 'Cardiff';
$capitalcities[] = 'Edinburgh';
var_dump($capitalcities);
asort($capitalcities);
var_dump($capitalcities);

$array["1"] = "someval1";
$array["2"] = "someval2";
$array["3"] = "someval3";
$array["10"] = "someval4";
$array["100"] = "someval5";
$array["20"] = "someval6";
$array["200"] = "someval7";
$array["30"] = "someval8";
$array["300"] = "someval9";
var_dump($array);
ksort($array, SORT_STRING);
var_dump($array);
echo "</br></br>";

//GRABBING KEYS AND VALUES
echo "GRABBING KEYS AND VALUES" . "</br>";
$users[923] = 'TelRev';
$users[100] = 'Skellington';
$users[1202] = 'CapnBlack';
$userids = array_keys($users);
var_dump($userids);

//specific user
$users[923] = 'TelRev';
$users[100] = 'Skellington';
$users[1202] = 'CapnBlack';
$userids = array_keys($users, "TelRev");
var_dump($userids);

//grab values (useful when sorting)
$array_g[] = "Hello";
$array_g[] = "World";
$array_g[] = "Foo";
$array_g[] = "Bar";
$array_g[] = "Baz";
var_dump($array_g);
asort($array_g);

var_dump($array_g);
var_dump(array_values($array_g));
echo "</br></br>";

//RANDOMIZE 
echo "RANDOMIZE" . "</br>";
$natural_born_killers = array("lions", "tigers", "bears", "kittens");
shuffle($natural_born_killers);
var_dump($natural_born_killers);

$natural_born_killers = array("lions", "tigers", "bears", "kittens");
var_dump(array_rand($natural_born_killers, 2));
echo "</br></br>";

//ARRAY OF NUMBERS
echo "ARRAY OF NUMBERS" . "</br>";
$questions = range(1, 40);
$questions = shuffle($questions);
var_dump($questions);

$questions = range(1, 10, 2); // gives 1, 3, 5, 7, 9
$questions = range(1, 10, 3); // gives 1, 4, 7, 10
$questions = range(10, 100, 10);
var_dump($questions);

$questions = range(100, 0, 10);
var_dump($questions);

$questions = range("a", "z", 1); // gives a, b, c, d, ..., x, y, z
$questions = range("z", "a", 2);
var_dump($questions);

//MULTIDIMENSIONAL ARRAYS
echo "MULTIDIMENSIONAL ARRAYS" . "</br>";
$capitalcities['England'] = array("Capital" => "London", "Population" => 40000000, "NationalSport" => "Cricket");
$capitalcities['Wales'] = array("Capital" => "Cardiff", "Population" => 5000000, "NationalSport" => "Rugby");
$capitalcities['Scotland'] = array("Capital" => "Edinburgh", "Population" => 8000000, "NationalSport" => "Football");
var_dump($capitalcities);

$name['noeld'] = array("firstname" => "Noel", "lastname" => "David");
$name['aried'] = array("firstname" => "Ariegail", "lastname" => "David");
$name['apoll'] = array("firstname" => "Apolinario", "lastname" => "Lapuz");
var_dump($name);

//HOLES IN ARRAYS
echo "HOLES IN ARRAYS" . "</br>";

//the problem
$array["a"] = "Foo";
$array["b"] = "";
$array["c"] = "Baz";
$array["d"] = "Wom";
print end($array);

while ($val = prev($array)) {
    print $val;
}

echo "</br>";

//the solution
$array["a"] = "Foo";
$array["b"] = "";
$array["c"] = "Baz";
$array["d"] = "Wom";


while (list($var, $val) = each($array)) {
    print "$var is $val\n";
}

echo "</br></br>";

//ARRAYS IS STRINGS
echo "ARRAYS IS STRINGS" . "</br>";
$myarray['foo'] = "bar";
print "This is from an array: {$myarray['foo']}\n";

echo "</br></br>";

//SAVING ARRAYS 
echo "SAVING ARRAYS " . "</br>";
$array["a"] = "Foo";
$array["b"] = "Bar";
$array["c"] = "Baz";
$array["d"] = "Wom";

$str = serialize($array);
$strenc = urlencode($str);
print $str . "\n";
print $strenc . "\n";

